import java.util.HashMap;
import java.util.Map;


import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;
 
@Path("/rest")
public class RestService {
    // POSITION X and Y
	private Robot mars;


    
    
    
    @POST
    @Path("/create")
    @Produces("application/json")
    public Response makeMap() {
            mars = new Robot();
            String output = "Robot Started\n"; 
            return Response.status(200).entity(output).build();
    }
    
    private String DirectionName(String pos) {
        // Create a dictionary
        Map<String, String> map = new HashMap<String, String>();
        
        map.put("N", "North");
        map.put("S", "South");
        map.put("W", "West");
        map.put("E", "East");

        return map.get(pos);

    }


    @POST
    @Path("/position")
    @Produces("application/json")
    public Response position() {
        String output = "X: " + mars.getX() + " Y: " + mars.getY() + " Direction: " + DirectionName(mars.getDir() + "\n");
        return Response.status(200).entity(output).build();
    }


    @POST
    @Path("/{param}")
    public Response move(@PathParam("param") String instruction) {



	    if (instruction.equals("M")) {
	        mars.move();
	    } else {
	        checkAndTurn(instruction);
	    }


        
        return Response.status(200).entity("Commands Executed").build();

    }

    // See if the command and turn the robot;
    private boolean checkAndTurn(String command) {
        boolean value = false;
            switch (command) {
                case "L":
                    turnLeft();
                    value = true;
                    break;
                case "S":
                    turnRight();
                    value = true;
                    break;
            }
        return value;
    }

    private void turnLeft() {
        switch (mars.getDir()) {
            case "N":
            	mars.setDirection("W");
                break;
            case "W": 
            	mars.setDirection("S");
                break;
            case "S":
            	mars.setDirection("E");
                break;
            case "E":
            	mars.setDirection("N");
                break;
        }
    }
    
    private void turnRight() {
        switch (mars.getDir()) {
            case "N":
            	mars.setDirection("E");
                break;
            case "E": 
            	mars.setDirection("S");
                break;
            case "S":
            	mars.setDirection("W");
                break;
            case "W":
            	mars.setDirection("N");
                break;
        }
    }

  
}
    
 
